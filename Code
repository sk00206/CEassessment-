from roboticstoolbox import Bicycle, RandomPath, VehicleIcon,RangeBearingSensor,LandmarkMap
from math import pi ,atan2
import matplotlib.pyplot as plt 

#taking user input for initial position 
x = eval(input("Enter the x coordinated of initial position : "))
y = eval(input("Enter the y coordinated of initial position : "))

#taking user input for target
x1 = eval(input("Enter the x coordinated of target position : "))
y1 = eval(input("Enter the y coordinated of target position : "))

#taking user input for number of obstacles 
n = int(input("Enter the number of obstacles : "))

#initializing the robot 
anim = VehicleIcon('index.jpeg', scale = 1)
veh = Bicycle(
 animation = anim,
 control = RandomPath, 
 dim= 10 , #setting dimension of 10x10 grid centered at 0
 x0=( x,y ,0) ,#inital position 
 )
veh.init(plot= True)

#adding goal
goal=[x1,y1];
goal_marker_style = {
 'marker': 'D',
 'markersize': 3, 
 'color': 'b',
}

#plotting goal
plt.plot(goal[0], goal[1], **goal_marker_style)

#loading the map with landmarks
map = LandmarkMap (n, 10)
map.plot()

#adding sensor
sensor=RangeBearingSensor(robot=veh, map= map ,animate=True)

#printing sensor readings 
print('Sensor readings: \n ' , sensor.h(veh.x))

#robot stops when close to landmark

distances = [i[0] for i in sensor.h(veh.x)]
angles = [i[1] for i in sensor.h(veh.x)]
run = True
while(run):
    for i in sensor.h(veh.x):
        if i[0] < 3 :
            if abs(i[1]<pi):
                run = False
        else:
             run = True 
             while(run): 
                 goal_heading = atan2(
                 goal[1] - veh.x[1], 
                 goal[0] - veh.x[0])
                 steer = goal_heading - veh.x[2]
                 veh.step(1,steer)
                 if((abs(goal[0]-veh.x[0]) > 1) or (abs(goal[1]-veh.x[1]) > 1)):
                     run=True
                 else:
                     run = False
                     
                 veh._animation.update(veh.x)       
                 plt. pause(0.05)
plt.pause(1000)
